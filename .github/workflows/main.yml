name: CI/CD Ispace-App to AWS

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Ensure .env file exists
      run: |
        if [ ! -f .env ]; then
          cp .env.example .env
        fi

    - name: Install Composer Dependencies
      run: composer install --no-interaction --prefer-dist
        
    - name: Generate APP_KEY
      run: php artisan key:generate --ansi

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
    
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest -f Dockerfile .
    
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
    
    - name: Upload .env file
      uses: actions/upload-artifact@v2
      with:
        name: env-file
        path: .env

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Download .env file
      uses: actions/download-artifact@v2
      with:
        name: env-file
        path: .

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
    
    - name: Pull Docker Image
      run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
    
    - name: Ensure Vendor and Storage Directories Exist
      run: |
        mkdir -p vendor storage/logs
        sudo chown -R $USER:$USER vendor storage
    
    - name: Install Composer Dependencies
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          --user root \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          sh -c "composer install --no-interaction --prefer-dist"
    
    - name: Run Docker Container and Execute Tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          --user root \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          php artisan test
    
    - name: Start Application for Accessibility Check
      run: |
        docker run -d --name my-app-container \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          -p 8000:8000 \
          --user root \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          php artisan serve --host=0.0.0.0 --port=8000
    
    - name: Verify Application Accessibility
      run: |
        sleep 10 # Give time for the application to start
        curl -f http://localhost:8000 || exit 1
    
    - name: Cleanup
      run: docker rm -f my-app-container

  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
      terraform_version: 1.8.5
      terraform_wrapper: false
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY}}
          aws-secret-access-key: ${{secrets.TF_USER_AWS_SECRET}}
          aws-region: ap-southeast-2
      
      - name: Initialize Terraform
        id: init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.out
      
      - name: Terraform Apply
        run: terraform apply plan.out
        env:
          TF_VAR_access_key: ${{ secrets.TF_USER_AWS_KEY }}
          TF_VAR_secret_key: ${{ secrets.TF_USER_AWS_SECRET }}
      
      - name: wait 20 seconds
        run: sleep 20
      
      - name: Get Instance IP
        id: instance_ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "::set-output name=instance_ip::$INSTANCE_IP"
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo ${{ env.INSTANCE_IP }}
      
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Get SSH Private Key
        id: ssh_private_key
        run: |
          SSH_PRIVATE_KEY=$(terraform show -json | jq -r '.values.root_module.resources[] | select(.type == "tls_private_key" and .name == "rsa_4096") | .values.private_key_pem')
          echo "${SSH_PRIVATE_KEY}" > ssh_private_key.pem
          chmod 600 ssh_private_key.pem
          echo "::set-output name=ssh_private_key::ssh_private_key.pem"
          echo "$SSH_PRIVATE_KEY"
      
      - name: Push Docker Image to EC2 Instance
        shell: /usr/bin/bash -e {0}
        env:
          AWS_REGION: us-east-2
          TF_VAR_access_key: ${{ secrets.TF_USER_AWS_KEY }}
          TF_VAR_secret_key: ${{ secrets.TF_USER_AWS_SECRET }}
          INSTANCE_IP: ${{ env.INSTANCE_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{ env.INSTANCE_IP }} '
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ubuntu
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
          docker run -d --name my-app-container --env-file .env -p 3000:9000 --user root ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest php artisan serve --host=0.0.0.0 --port=9000
          docker exec my-app-container php artisan cache:clear
          docker exec my-app-container php artisan config:cache
          '
  
