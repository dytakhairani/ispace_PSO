name: Continuous Integration Docker

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Ensure .env file exists
      run: |
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
    
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
    
    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest -f Dockerfile .
    
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
    
    - name: Upload .env file
      uses: actions/upload-artifact@v2
      with:
        name: env-file
        path: .env

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Download .env file
      uses: actions/download-artifact@v2
      with:
        name: env-file
        path: .
    
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
    
    - name: Pull Docker Image
      run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest
    
    - name: Install Composer Dependencies
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          sh -c "mkdir -p /var/www/vendor && composer install --no-interaction --prefer-dist"
    
    - name: Generate APP_KEY
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          php artisan key:generate
        
    - name: Run Docker Container and Execute Tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          php artisan test
    
    - name: Start Application for Accessibility Check
      run: |
        docker run -d --name my-app-container \
          -v ${{ github.workspace }}:/var/www \
          -w /var/www \
          --env-file .env \
          -p 8000:8000 \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest \
          php artisan serve --host=0.0.0.0 --port=8000
    
    - name: Verify Application Accessibility
      run: |
        sleep 10 # Beri waktu untuk aplikasi berjalan
        curl -f http://localhost:8000 || exit 1

    - name: Cleanup
      run: docker rm -f my-app-container
      
  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Log in to Heroku
      run: |
        echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
        heroku --version

    - name: Pull Docker Image from Docker Hub
      run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest

    - name: Tag Docker Image for Heroku Registry
      run: docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest registry.heroku.com/<ispace>/web

    - name: Push Docker Image to Heroku Registry
      run: docker push registry.heroku.com/<ispace>/web

    - name: Release Docker Image on Heroku
      run: heroku container:release web --app <ispace>
